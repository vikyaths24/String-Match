Time Comparison
In the CPU plot graph, we can see that for problem size of less than 2000 both the efficient and the basic version of the program take almost the same running time. In problem sizes of over 200 we start to see the basic version of the program run much faster than the memory efficient version of the program. The basic version of the program almost runs more than two times faster than the memory efficient program. This happens coz in the basic version of the program the whole problem is just computed once, and the final result is stored the resultant matrix whereas in the memory efficient version of the program the whole problem is divided into many smaller subproblems and then each of these subproblems are then individually computed which increase the running time the program linearly as the problem size increases  

Memory Comparison
In the memory graph we can see that for problem size of equal to or less than 2400 the efficient and basic version of the program uses the space. In problems larger than those the efficient version of the program uses exponentially lesser space while compared to the basic program. This happens coz in the efficient program we calculate and store the values off the subproblems in divide and conquer in 1-dimensional matrix of size at most half of the first string. The space required for this is much less than the basic version where we use a 2-dimensional matrix of size length of string1*length of string 2. Due to the fact we use a one-dimensional matrix and we further make our problems smaller and solve them recursively and then simple combine answers from each step we get an exponential space saving by using efficient version when compared to basic version

Conclusion
For smaller problem sizes of less than 2400 we should use the basic version of the program as it runs much faster, and the space used in both the programs is almost the same. For problems of sizes greater than 2400 we should use the memory efficient version as it saves a lot of space while compared to the basic one

